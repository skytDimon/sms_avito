#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
"""

import json
import requests
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)





def test_telegram_config(telegram_config):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
    
    try:
        bot_token = telegram_config.get('bot_token')
        chat_ids = telegram_config.get('chat_ids', [])
        
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        if not chat_ids and telegram_config.get('chat_id'):
            chat_ids = [telegram_config.get('chat_id')]
        
        if not all([bot_token, chat_ids]):
            print("‚ùå –ù–µ –≤—Å–µ Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
            return False
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ API
        url = f"https://api.telegram.org/bot{bot_token}/getMe"
        response = requests.get(url)
        response.raise_for_status()
        
        bot_info = response.json()
        if not bot_info.get('ok'):
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
            return False
        
        print(f"‚úÖ –ë–æ—Ç –Ω–∞–π–¥–µ–Ω: {bot_info['result']['first_name']}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤—Å–µ —á–∞—Ç—ã
        success_count = 0
        for i, chat_id in enumerate(chat_ids):
            send_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
            data = {
                'chat_id': chat_id,
                'text': f'üîî –¢–µ—Å—Ç - Avito Message Forwarder —Ä–∞–±–æ—Ç–∞–µ—Ç! (–ß–∞—Ç {i+1}/{len(chat_ids)})'
            }
            
            try:
                response = requests.post(send_url, data=data)
                response.raise_for_status()
                
                result = response.json()
                if result.get('ok'):
                    print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ chat_id: {chat_id}")
                    success_count += 1
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ chat_id {chat_id}: {result}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ chat_id {chat_id}: {e}")
        
        if success_count > 0:
            print(f"‚úÖ Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ ({success_count}/{len(chat_ids)} —á–∞—Ç–æ–≤)")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∏ –≤ –æ–¥–∏–Ω —á–∞—Ç")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Telegram –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        return False


def get_avito_access_token(client_id, client_secret):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ access token –¥–ª—è Avito API"""
    try:
        auth_url = 'https://api.avito.ru/token'
        
        data = {
            'grant_type': 'client_credentials',
            'client_id': client_id,
            'client_secret': client_secret
        }
        
        response = requests.post(auth_url, data=data)
        
        if response.status_code == 200:
            token_data = response.json()
            return token_data.get('access_token')
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return None


def test_avito_config(avito_config):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Avito –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Avito –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
    
    method = avito_config.get('method', 'api')
    
    if method == 'api':
        client_secret = avito_config.get('api_key')  # —ç—Ç–æ client_secret
        client_id = avito_config.get('user_id')     # —ç—Ç–æ client_id
        
        if not all([client_secret, client_id]):
            print("‚ùå Client ID –∏–ª–∏ Client Secret –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
            return False
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º access token
            access_token = get_avito_access_token(client_id, client_secret)
            
            if not access_token:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å access token")
                return False
            
            print("‚úÖ Access token –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
            headers = {
                'Authorization': f'Bearer {access_token}',
                'Content-Type': 'application/json'
            }
            
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑–æ–≤–æ–≥–æ API
            try:
                print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π API endpoint...")
                test_url = 'https://api.avito.ru/core/v1/accounts/self'
                response = requests.get(test_url, headers=headers)
                
                if response.status_code == 200:
                    print("‚úÖ –ë–∞–∑–æ–≤—ã–π API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                    print("‚ö†Ô∏è –ù–æ API –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
                    print("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É Avito")
                    return True
                elif response.status_code == 403:
                    print("‚ö†Ô∏è API –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π endpoint")
                    print("üí° –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ API –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞ —É Avito")
                    return True
                else:
                    print(f"‚ö†Ô∏è –û—Ç–≤–µ—Ç API: {response.status_code} - {response.text}")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            
            print("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print("   1. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É Avito –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ API –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞")
            print("   2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ 'scraping' –≤ config.json")
            print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
            return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Avito API: {e}")
            return False
    
    elif method == 'scraping':
        print("‚ö†Ô∏è –í–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ChromeDriver")
        return True
    
    elif method == 'disabled':
        print("‚ÑπÔ∏è Avito –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ - —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ Telegram")
        return True
    
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥: {method}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Avito Message Forwarder\n")
    
    try:
        with open('config.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª config.json –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–º–µ—Ä–∞ –≤ README.md")
        return
    except json.JSONDecodeError:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–∞–π–ª–∞ config.json")
        return
    
    results = []
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    if 'telegram' in config:
        results.append(test_telegram_config(config['telegram']))
    else:
        print("‚ùå –°–µ–∫—Ü–∏—è 'telegram' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ config.json")
        results.append(False)
    
    print()
    
    if 'avito' in config:
        results.append(test_avito_config(config['avito']))
    else:
        print("‚ùå –°–µ–∫—Ü–∏—è 'avito' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ config.json")
        results.append(False)
    
    print("\n" + "="*50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"Telegram: {'‚úÖ' if results[0] else '‚ùå'}")
    print(f"Avito: {'‚úÖ' if results[1] else '‚ùå'}")
    
    if all(results):
        print("\nüéâ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("üöÄ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É: python main.py")
    else:
        print("\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ config.json")
        print("üìñ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ README.md")


if __name__ == "__main__":
    main()
