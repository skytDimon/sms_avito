#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å Avito –Ω–∞ –ø–æ—á—Ç—É –∏ –≤ Telegram
"""

import requests
import json
import logging
from datetime import datetime
from typing import Dict, List, Optional
import time
from avito_client import AvitoClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('avito_forwarder.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class AvitoMessageForwarder:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å Avito –≤ Telegram"""
    
    def __init__(self, config: Dict):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        
        Args:
            config: –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ (telegram, avito)
        """
        self.config = config
        self.telegram_config = config.get('telegram', {})
        self.avito_config = config.get('avito', {})
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Avito
        self.avito_client = AvitoClient(self.avito_config)
        
        # Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.bot_token = self.telegram_config.get('bot_token')
        self.chat_ids = self.telegram_config.get('chat_ids', [])
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Å –æ–¥–Ω–∏–º chat_id
        if not self.chat_ids and self.telegram_config.get('chat_id'):
            self.chat_ids = [self.telegram_config.get('chat_id')]
        

    
    def send_telegram_message(self, message: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –Ω–∞ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ chat_id
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ (True –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ)
        """
        if not self.chat_ids:
            logger.error("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã chat_ids –¥–ª—è Telegram")
            return False
            
        success_count = 0
        total_count = len(self.chat_ids)
        
        for chat_id in self.chat_ids:
            try:
                url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
                data = {
                    'chat_id': chat_id,
                    'text': message,
                    'parse_mode': 'HTML'
                }
                
                response = requests.post(url, data=data)
                response.raise_for_status()
                
                logger.info(f"Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ –≤ chat_id: {chat_id}")
                success_count += 1
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è –≤ chat_id {chat_id}: {e}")
        
        if success_count > 0:
            logger.info(f"Telegram —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ {success_count} –∏–∑ {total_count} —á–∞—Ç–æ–≤")
            return True
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Telegram —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∏ –≤ –æ–¥–∏–Ω —á–∞—Ç")
            return False
    
    def get_avito_messages(self) -> List[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å Avito
        
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        try:
            messages = self.avito_client.get_messages()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π —Å Avito")
            return messages
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π Avito: {e}")
            return []
    

    
    def format_message_for_telegram(self, avito_message: Dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
        
        Args:
            avito_message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å Avito
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        message = f"""
üîî <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Avito</b>

üìÖ <b>–í—Ä–µ–º—è:</b> {timestamp}
üë§ <b>–û—Ç:</b> {avito_message.get('sender', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
üìã <b>–û–±—ä—è–≤–ª–µ–Ω–∏–µ:</b> {avito_message.get('ad_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}

üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
{avito_message.get('text', '–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')}

---
<i>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</i>
        """.strip()
        
        return message
    
    def process_messages(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å Avito
        messages = self.get_avito_messages()
        
        if not messages:
            logger.info("–ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(messages)} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        for message in messages:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
                telegram_message = self.format_message_for_telegram(message)
                telegram_sent = self.send_telegram_message(telegram_message)
                
                if telegram_sent:
                    logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ Telegram")
                else:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def run_continuous(self, check_interval: int = 300):
        """
        –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        
        Args:
            check_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç)
        """
        logger.info(f"–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {check_interval} —Å–µ–∫)")
        
        while True:
            try:
                self.process_messages()
                time.sleep(check_interval)
            except KeyboardInterrupt:
                logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                break
            except Exception as e:
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                time.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    try:
        with open('config.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
    except FileNotFoundError:
        logger.error("–§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.")
        return
    except json.JSONDecodeError:
        logger.error("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–∞–π–ª–∞ config.json")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ—Ä–≤–∞—Ä–¥–µ—Ä
    forwarder = AvitoMessageForwarder(config)
    
    # –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏–ª–∏ –≤ —Ä–µ–∂–∏–º–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã
    # forwarder.process_messages()  # –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    forwarder.run_continuous()  # –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞


if __name__ == "__main__":
    main()
